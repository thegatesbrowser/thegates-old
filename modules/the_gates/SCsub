#!/usr/bin/env python

Import("env")
Import("env_modules")

env_tg = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

# zmqpp
thirdparty_dir = "#thirdparty/zmqpp/"
thirdparty_sources = [
    "actor.cpp",
    "auth.cpp",
    "context.cpp",
    "curve.cpp",
    "frame.cpp",
    "loop.cpp",
    "message.cpp",
    "poller.cpp",
    "proxy.cpp",
    "proxy_steerable.cpp",
    "reactor.cpp",
    "signal.cpp",
    "socket.cpp",
    "z85.cpp",
    "zap_request.cpp",
    "zmqpp.cpp"
]
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]
env_tg.Prepend(CPPPATH=[thirdparty_dir])

# flingfd
if env["platform"] == "linuxbsd":
    thirdparty_flingfd_dir = "#thirdparty/flingfd/"
    thirdparty_flingfd_sources = [
        "flingfd.c",
    ]
    thirdparty_sources += [thirdparty_flingfd_dir + file for file in thirdparty_flingfd_sources]
    env_tg.Prepend(CPPPATH=[thirdparty_flingfd_dir])


env_thirdparty = env_tg.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_tg.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
